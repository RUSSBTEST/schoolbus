# NOTE: PREREQUISITE required to build the web service:
# the web service is built using the image from ./Client as a base image
# to create that base image you can run:
# cd ./Client
# docker build . -t tran-schoolbus-tools/client
#
# This stack can then be started with:
# First create the docker volume manually - This is done to avoid permission issues with the containers access the volume
# these issues were found on Windows.
# `docker volume create --name test-db -d local`
#
# from the root of the project, in the dir with the `docker-compose.yml` file
# `docker-compose up db` in one session and
# `docker-compose up web` in another
#
# The web service should be viewable on the host machine at localhost:8080
# If you are running docker-machine then you need to replace localhost with the IP address of the docker-machine (likely found in Virtualbox)
#
# Loading test data:
#
# - Go to the directory; ./ApiSpec/TestData
#
# On unix run: ./load-all.sh http://localhost:8080/
#
# On windows run: ./load-all.bat http://localhost:8080/
#
# Again if you are using docker-machine you need to change localhost to the IP address of the docker-machine
#
version: '3'
services:
  web:
    build:
      context: .
      dockerfile: frontend.Dockerfile
    ports:
      - "8080:8080"
    depends_on:
      - api
  api:
    build:
      context: .
      dockerfile: server.Dockerfile
    depends_on:
      - db
    environment:
      DATABASE_SERVICE_NAME: 'db'
      POSTGRESQL_USER: 'postgres'
      POSTGRESQL_PASSWORD: 'developement123'
      POSTGRESQL_DATABASE: 'postgres'
      ASPNETCORE_ENVIRONMENT: 'Development'
      UserInitializationFile: '/app/Server/example_users.json'
    ports:
      - "59836"
  db:
    image: postgres:9.4-alpine
    environment:
      POSTGRES_USER: 'postgres'
      POSTGRES_PASSWORD: 'developement123'
      POSTGRES_DB: 'postgres'
    volumes:
#      - "./db_data:/var/lib/postgresql/data"
      - test-db:/var/lib/postgresql/data
volumes:
    test-db:
      external: true

